
//Ragel based parser for absolute or relative URLs.


using System;
using System.Collections.Generic;

namespace Pointy.Util
{

    public class PointyUri
    {
        #region Properties

        string _OriginalPath;
        string _Host;
        int _Port = 80;
        string _Path;
        Dictionary<string, string> _Query;
        string _Fragment;

        public string OriginalPath
        {
            get { return _OriginalPath; }
        }
        public string Host
        {
            get { return _Host; }
        }
        public int Port
        {
            get { return _Port; }
        }
        public string Path
        {
            get { return _Path; }
        }
        public Dictionary<string, string> Query
        {
            get { return _Query; }
        }
        public string Fragment
        {
            get { return _Fragment; }
        }

        #endregion

        #region Ragel Data

        /* #line 2 "URLParser.cs" */
        static readonly char[] _url_parser_trans_keys = new char[] {
	'\u0000', '\u0000', '\u0030', '\u0066', '\u0030', '\u0066', '\u0030', '\u0066', '\u0030', '\u0066', '\u0030', '\u0066', '\u0030', '\u0066', '\u0030', '\u0066', 
	'\u0030', '\u0066', '\u0030', '\u0066', '\u0030', '\u0066', '\u0030', '\u0066', '\u0030', '\u0066', '\u002f', '\u002f', '\u0021', '\u007e', '\u0021', '\u007e', 
	'\u0021', '\u007e', '\u0021', '\u007e', '\u0021', '\u007e', '\u0021', '\u007e', '\u0021', '\u007e', '\u0021', '\u007e', '\u0021', '\u007e', '\u0021', '\u007e', 
	'\u0021', '\u007e', '\u0021', '\u007e', '\u0021', '\u007e', '\u0021', '\u007e', '\u0021', '\u007e', '\u0021', '\u007e', '\u0021', '\u007e', '\u0021', '\u007e', 
	'\u0021', '\u007e', '\u0021', '\u007e', '\u0021', '\u007e', '\u0021', '\u007e', '\u0021', '\u007e', '\u0021', '\u007e', '\u0021', '\u007e', '\u0021', '\u007e', 
	'\u0021', '\u007e', '\u0021', '\u007e', '\u0021', '\u007e', '\u0021', '\u007e', '\u0021', '\u007e', '\u0021', '\u007e', '\u0021', '\u007e', (char) 0
};

        static readonly sbyte[] _url_parser_key_spans = new sbyte[] {
	0, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 1, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94
};

        static readonly short[] _url_parser_index_offsets = new short[] {
	0, 0, 56, 112, 168, 224, 280, 336, 
	392, 448, 504, 560, 616, 672, 674, 769, 
	864, 959, 1054, 1149, 1244, 1339, 1434, 1529, 
	1624, 1719, 1814, 1909, 2004, 2099, 2194, 2289, 
	2384, 2479, 2574, 2669, 2764, 2859, 2954, 3049, 
	3144, 3239, 3334, 3429, 3524, 3619, 3714
};

        static readonly sbyte[] _url_parser_indicies = new sbyte[] {
	0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	1, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 2, 2, 2, 2, 2, 
	1, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 1, 1, 1, 1, 1, 
	1, 1, 3, 3, 3, 3, 3, 3, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 3, 3, 3, 3, 3, 3, 
	1, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 1, 1, 1, 1, 1, 
	1, 1, 4, 4, 4, 4, 4, 4, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 4, 4, 4, 4, 4, 4, 
	1, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 1, 1, 1, 1, 1, 
	1, 1, 5, 5, 5, 5, 5, 5, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 5, 5, 5, 5, 5, 5, 
	1, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 1, 1, 1, 1, 1, 
	1, 1, 6, 6, 6, 6, 6, 6, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 6, 6, 6, 6, 6, 6, 
	1, 7, 7, 7, 7, 7, 7, 7, 
	7, 7, 7, 1, 1, 1, 1, 1, 
	1, 1, 7, 7, 7, 7, 7, 7, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 7, 7, 7, 7, 7, 7, 
	1, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 1, 1, 1, 1, 1, 
	1, 1, 8, 8, 8, 8, 8, 8, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 8, 8, 8, 8, 8, 8, 
	1, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 1, 1, 1, 1, 1, 
	1, 1, 9, 9, 9, 9, 9, 9, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 9, 9, 9, 9, 9, 9, 
	1, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 1, 1, 1, 1, 1, 
	1, 1, 10, 10, 10, 10, 10, 10, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 10, 10, 10, 10, 10, 10, 
	1, 11, 11, 11, 11, 11, 11, 11, 
	11, 11, 11, 1, 1, 1, 1, 1, 
	1, 1, 11, 11, 11, 11, 11, 11, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 11, 11, 11, 11, 11, 11, 
	1, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 1, 1, 1, 1, 1, 
	1, 1, 12, 12, 12, 12, 12, 12, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 12, 12, 12, 12, 12, 12, 
	1, 13, 1, 4, 1, 14, 4, 15, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 13, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 1, 4, 1, 4, 
	1, 16, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 4, 1, 4, 4, 4, 4, 4, 
	4, 4, 17, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	4, 1, 4, 1, 14, 4, 15, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	18, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 1, 4, 1, 4, 1, 
	16, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 1, 1, 1, 1, 
	4, 1, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 1, 1, 1, 4, 
	1, 19, 1, 1, 19, 20, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 1, 19, 1, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 1, 1, 1, 1, 19, 
	1, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 1, 1, 1, 19, 1, 
	2, 1, 1, 2, 21, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 2, 1, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 2, 1, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 2, 1, 6, 
	1, 22, 6, 23, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 1, 6, 1, 24, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 1, 1, 1, 1, 6, 1, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 1, 1, 1, 6, 1, 25, 1, 
	26, 25, 27, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 1, 25, 1, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	1, 1, 1, 1, 25, 1, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	1, 1, 1, 25, 1, 8, 1, 28, 
	8, 29, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	1, 8, 1, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 1, 
	1, 1, 1, 8, 1, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 1, 
	1, 1, 8, 1, 6, 1, 22, 6, 
	23, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 30, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 1, 
	6, 1, 24, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 1, 1, 
	1, 1, 6, 1, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 6, 6, 
	6, 6, 6, 6, 6, 6, 1, 1, 
	1, 6, 1, 10, 1, 22, 10, 31, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 18, 32, 32, 32, 32, 32, 32, 
	32, 32, 32, 32, 10, 10, 1, 10, 
	1, 24, 33, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 1, 1, 1, 
	1, 10, 1, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 1, 1, 1, 
	10, 1, 10, 1, 22, 10, 31, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	18, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 1, 10, 1, 
	24, 33, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 1, 1, 1, 1, 
	10, 1, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 1, 1, 1, 10, 
	1, 12, 1, 22, 12, 35, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 18, 
	36, 36, 36, 36, 36, 36, 36, 36, 
	36, 36, 12, 12, 1, 12, 1, 24, 
	12, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 1, 1, 1, 1, 12, 
	1, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 1, 1, 1, 12, 1, 
	12, 1, 22, 12, 35, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 18, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 1, 12, 1, 24, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 1, 1, 1, 1, 12, 1, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 1, 1, 1, 12, 1, 12, 
	1, 22, 12, 35, 12, 12, 12, 12, 
	12, 12, 12, 38, 39, 18, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	12, 12, 1, 12, 1, 24, 12, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 1, 1, 1, 1, 12, 1, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 1, 1, 1, 12, 1, 12, 1, 
	22, 12, 35, 12, 12, 12, 12, 12, 
	12, 12, 38, 12, 18, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 12, 
	12, 1, 12, 1, 24, 12, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	1, 1, 1, 1, 12, 1, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 40, 40, 
	1, 1, 1, 12, 1, 12, 1, 22, 
	12, 35, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 18, 40, 40, 40, 40, 
	40, 40, 40, 40, 40, 40, 12, 12, 
	1, 12, 1, 24, 12, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 1, 
	1, 1, 1, 12, 1, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 1, 
	1, 1, 12, 1, 12, 1, 42, 12, 
	35, 12, 12, 12, 12, 12, 12, 12, 
	43, 44, 45, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 46, 12, 1, 
	12, 1, 47, 12, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 1, 1, 
	1, 1, 12, 1, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 1, 1, 
	1, 12, 1, 12, 1, 22, 12, 35, 
	12, 12, 12, 12, 12, 12, 12, 43, 
	12, 18, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 12, 12, 1, 12, 
	1, 24, 12, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 1, 1, 1, 
	1, 12, 1, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 1, 1, 1, 
	12, 1, 12, 1, 42, 12, 35, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	45, 40, 40, 40, 40, 40, 40, 40, 
	40, 40, 40, 46, 12, 1, 12, 1, 
	47, 12, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 1, 1, 1, 1, 
	12, 1, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 1, 1, 1, 12, 
	1, 12, 1, 48, 12, 35, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 49, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 12, 12, 1, 12, 1, 51, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 1, 1, 1, 1, 12, 
	1, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 1, 1, 1, 12, 1, 
	12, 1, 52, 12, 35, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 53, 54, 
	54, 54, 54, 54, 54, 54, 54, 54, 
	54, 12, 12, 1, 12, 1, 55, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 1, 1, 1, 1, 12, 1, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 1, 1, 1, 12, 1, 10, 
	1, 22, 10, 31, 10, 10, 10, 10, 
	10, 10, 10, 56, 57, 18, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	10, 10, 1, 10, 1, 24, 33, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 1, 1, 1, 1, 10, 1, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 1, 1, 1, 10, 1, 10, 1, 
	22, 10, 31, 10, 10, 10, 10, 10, 
	10, 10, 56, 10, 18, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 10, 
	10, 1, 10, 1, 24, 33, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	1, 1, 1, 1, 10, 1, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	1, 1, 1, 10, 1, 10, 1, 22, 
	10, 31, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 18, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 10, 10, 
	1, 10, 1, 24, 33, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 1, 
	1, 1, 1, 10, 1, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 1, 
	1, 1, 10, 1, 10, 1, 42, 10, 
	31, 10, 10, 10, 10, 10, 10, 10, 
	60, 61, 45, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 62, 10, 1, 
	10, 1, 47, 33, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 1, 1, 
	1, 1, 10, 1, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 1, 1, 
	1, 10, 1, 10, 1, 22, 10, 31, 
	10, 10, 10, 10, 10, 10, 10, 60, 
	10, 18, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 10, 10, 1, 10, 
	1, 24, 33, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 1, 1, 1, 
	1, 10, 1, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 1, 1, 1, 
	10, 1, 10, 1, 42, 10, 31, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	45, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 62, 10, 1, 10, 1, 
	47, 33, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 1, 1, 1, 1, 
	10, 1, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 1, 1, 1, 10, 
	1, 10, 1, 48, 10, 31, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 49, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 10, 10, 1, 10, 1, 51, 
	33, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 1, 1, 1, 1, 10, 
	1, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 1, 1, 1, 10, 1, 
	10, 1, 52, 10, 31, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 53, 64, 
	64, 64, 64, 64, 64, 64, 64, 64, 
	64, 10, 10, 1, 10, 1, 55, 33, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 1, 1, 1, 1, 10, 1, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 1, 1, 1, 10, 1, 4, 
	1, 14, 4, 15, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 18, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	1, 4, 1, 4, 1, 16, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 1, 1, 1, 1, 4, 1, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 65, 4, 4, 4, 4, 4, 
	4, 1, 1, 1, 4, 1, 4, 1, 
	14, 4, 15, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 18, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 1, 
	4, 1, 4, 1, 16, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	1, 1, 1, 1, 4, 1, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 66, 4, 4, 4, 4, 4, 4, 
	1, 1, 1, 4, 1, 4, 1, 14, 
	4, 15, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 18, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 4, 
	1, 4, 1, 16, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 1, 
	1, 1, 1, 4, 1, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 67, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 1, 
	1, 1, 4, 1, 4, 1, 14, 4, 
	15, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 18, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 68, 4, 1, 
	4, 1, 16, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 1, 4, 1, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 69, 4, 
	4, 4, 4, 4, 4, 4, 1, 1, 
	1, 4, 1, 4, 1, 14, 4, 15, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 18, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 68, 4, 1, 4, 
	1, 16, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	1, 4, 1, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 1, 1, 1, 
	4, 1, 0
};

        static readonly sbyte[] _url_parser_trans_targs = new sbyte[] {
	2, 0, 17, 4, 15, 6, 18, 8, 
	20, 10, 23, 12, 25, 21, 16, 3, 
	19, 42, 18, 17, 1, 1, 16, 5, 
	19, 20, 16, 7, 16, 7, 22, 9, 
	34, 24, 37, 11, 26, 29, 27, 28, 
	26, 29, 16, 30, 31, 18, 32, 19, 
	16, 18, 33, 19, 16, 18, 33, 19, 
	35, 36, 34, 37, 38, 39, 40, 41, 
	41, 43, 44, 45, 13, 46
};

        static readonly sbyte[] _url_parser_trans_actions = new sbyte[] {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 1, 1, 1, 0, 4, 0, 
	4, 1, 5, 1, 6, 0, 0, 0, 
	1, 0, 1, 0, 1, 1, 0, 0, 
	0, 0, 7, 0, 0, 8, 9, 7, 
	10, 11, 1, 10, 12, 13, 0, 12, 
	0, 0, 0, 0, 0, 0, 9, 1, 
	0, 0, 0, 0, 0, 0
};

        static readonly sbyte[] _url_parser_eof_actions = new sbyte[] {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	2, 3, 4, 5, 6, 4, 4, 4, 
	4, 4, 4, 4, 4, 7, 4, 7, 
	10, 12, 4, 4, 4, 7, 4, 7, 
	10, 12, 0, 0, 0, 0, 0
};

        const int url_parser_start = 14;
        const int url_parser_first_final = 14;
        const int url_parser_error = 0;

        const int url_parser_en_main = 14;


        /* #line 131 "URLParser.rl" */
        #endregion

        public PointyUri(string path)
        {
            //Ragel stuff
            int cs;
            int p = 0;
            int pe = path.Length;
            int eof = pe;
            char[] data = path.ToCharArray();

            //Used for pulling stuff out
            int start = 0;
            string temp = null;

            #region Ragel Init

            /* #line 548 "URLParser.cs" */
            {
                cs = url_parser_start;
            }

            /* #line 148 "URLParser.rl" */
            #endregion

            #region Ragel Exec

            /* #line 551 "URLParser.cs" */
            {
                sbyte _slen;
                sbyte _trans;
                int _keys;
                short _inds;
                if (p == pe)
                    goto _test_eof;
                if (cs == 0)
                    goto _out;
            _resume:
                _keys = cs << 1;
                _inds = _url_parser_index_offsets[cs];

                _slen = _url_parser_key_spans[cs];
                _trans = _url_parser_indicies[_inds + (
                    _slen > 0 && _url_parser_trans_keys[_keys] <= data[p] &&
                    data[p] <= _url_parser_trans_keys[_keys + 1] ?
                    data[p] - _url_parser_trans_keys[_keys] : _slen)];

                cs = _url_parser_trans_targs[_trans];

                if (_url_parser_trans_actions[_trans] == 0)
                    goto _again;

                switch (_url_parser_trans_actions[_trans])
                {
                    case 1:
                        /* #line 6 "URLParser.rl" */
                        { start = p; }
                        break;
                    case 9:
                        /* #line 10 "URLParser.rl" */
                        {
                            _Host = path.Substring(start, p - start);
                        }
                        break;
                    case 4:
                        /* #line 21 "URLParser.rl" */
                        { _Path = path.Substring(start, p - start); }
                        break;
                    case 6:
                        /* #line 23 "URLParser.rl" */
                        {
                            _Query = new Dictionary<string, string>();
                            string[] chunks = path.Substring(start, p - start).Split('&');
                            string[] split = null;
                            for (int i = 0; i < chunks.Length; i++)
                            {
                                split = chunks[i].Split('=');
                                _Query[split[0]] = split.Length > 1 ? split[1] : null;
                            }
                        }
                        break;
                    case 11:
                        /* #line 6 "URLParser.rl" */
                        { start = p; }
                        /* #line 14 "URLParser.rl" */
                        {
                            temp = path.Substring(start, p - start);
                            if (!Int32.TryParse(temp, out _Port))
                            {
                                //TODO - fail somehow
                            }
                        }
                        break;
                    case 5:
                        /* #line 6 "URLParser.rl" */
                        { start = p; }
                        /* #line 23 "URLParser.rl" */
                        {
                            _Query = new Dictionary<string, string>();
                            string[] chunks = path.Substring(start, p - start).Split('&');
                            string[] split = null;
                            for (int i = 0; i < chunks.Length; i++)
                            {
                                split = chunks[i].Split('=');
                                _Query[split[0]] = split.Length > 1 ? split[1] : null;
                            }
                        }
                        break;
                    case 8:
                        /* #line 10 "URLParser.rl" */
                        {
                            _Host = path.Substring(start, p - start);
                        }
                        /* #line 6 "URLParser.rl" */
                        { start = p; }
                        break;
                    case 7:
                        /* #line 10 "URLParser.rl" */
                        {
                            _Host = path.Substring(start, p - start);
                        }
                        /* #line 21 "URLParser.rl" */
                        { _Path = path.Substring(start, p - start); }
                        break;
                    case 13:
                        /* #line 14 "URLParser.rl" */
                        {
                            temp = path.Substring(start, p - start);
                            if (!Int32.TryParse(temp, out _Port))
                            {
                                //TODO - fail somehow
                            }
                        }
                        /* #line 6 "URLParser.rl" */
                        { start = p; }
                        break;
                    case 12:
                        /* #line 14 "URLParser.rl" */
                        {
                            temp = path.Substring(start, p - start);
                            if (!Int32.TryParse(temp, out _Port))
                            {
                                //TODO - fail somehow
                            }
                        }
                        /* #line 21 "URLParser.rl" */
                        { _Path = path.Substring(start, p - start); }
                        break;
                    case 10:
                        /* #line 6 "URLParser.rl" */
                        { start = p; }
                        /* #line 14 "URLParser.rl" */
                        {
                            temp = path.Substring(start, p - start);
                            if (!Int32.TryParse(temp, out _Port))
                            {
                                //TODO - fail somehow
                            }
                        }
                        /* #line 21 "URLParser.rl" */
                        { _Path = path.Substring(start, p - start); }
                        break;
                    /* #line 665 "URLParser.cs" */
                    default: break;
                }

            _again:
                if (cs == 0)
                    goto _out;
                if (++p != pe)
                    goto _resume;
            _test_eof: { }
                if (p == eof)
                {
                    switch (_url_parser_eof_actions[cs])
                    {
                        case 4:
                            /* #line 21 "URLParser.rl" */
                            { _Path = path.Substring(start, p - start); }
                            break;
                        case 6:
                            /* #line 23 "URLParser.rl" */
                            {
                                _Query = new Dictionary<string, string>();
                                string[] chunks = path.Substring(start, p - start).Split('&');
                                string[] split = null;
                                for (int i = 0; i < chunks.Length; i++)
                                {
                                    split = chunks[i].Split('=');
                                    _Query[split[0]] = split.Length > 1 ? split[1] : null;
                                }
                            }
                            break;
                        case 3:
                            /* #line 33 "URLParser.rl" */
                            { _Fragment = path.Substring(start, p - start); }
                            break;
                        case 5:
                            /* #line 6 "URLParser.rl" */
                            { start = p; }
                            /* #line 23 "URLParser.rl" */
                            {
                                _Query = new Dictionary<string, string>();
                                string[] chunks = path.Substring(start, p - start).Split('&');
                                string[] split = null;
                                for (int i = 0; i < chunks.Length; i++)
                                {
                                    split = chunks[i].Split('=');
                                    _Query[split[0]] = split.Length > 1 ? split[1] : null;
                                }
                            }
                            break;
                        case 2:
                            /* #line 6 "URLParser.rl" */
                            { start = p; }
                            /* #line 33 "URLParser.rl" */
                            { _Fragment = path.Substring(start, p - start); }
                            break;
                        case 7:
                            /* #line 10 "URLParser.rl" */
                            {
                                _Host = path.Substring(start, p - start);
                            }
                            /* #line 21 "URLParser.rl" */
                            { _Path = path.Substring(start, p - start); }
                            break;
                        case 12:
                            /* #line 14 "URLParser.rl" */
                            {
                                temp = path.Substring(start, p - start);
                                if (!Int32.TryParse(temp, out _Port))
                                {
                                    //TODO - fail somehow
                                }
                            }
                            /* #line 21 "URLParser.rl" */
                            { _Path = path.Substring(start, p - start); }
                            break;
                        case 10:
                            /* #line 6 "URLParser.rl" */
                            { start = p; }
                            /* #line 14 "URLParser.rl" */
                            {
                                temp = path.Substring(start, p - start);
                                if (!Int32.TryParse(temp, out _Port))
                                {
                                    //TODO - fail somehow
                                }
                            }
                            /* #line 21 "URLParser.rl" */
                            { _Path = path.Substring(start, p - start); }
                            break;
                        /* #line 739 "URLParser.cs" */
                        default: break;
                    }
                }

            _out: { }
            }

            /* #line 152 "URLParser.rl" */
            #endregion

            #region Post-parse Setup

            _OriginalPath = path;

            #endregion
        }

        public override bool Equals(object obj)
        {
            if (!(obj is PointyUri))
                return false;
            PointyUri other = obj as PointyUri;

            //note that we specifically don't test OriginalPath equality
            if (this.Port != other.Port) return false;
            if (this._Fragment != null) if (!this._Fragment.Equals(other._Fragment)) return false;
            if (this._Host != null) if (!this._Host.Equals(other._Host)) return false;
            if (this._Path != null) if (!this._Path.Equals(other._Path)) return false;
            if (this._Query != null)
            {
                if (this._Query.Count != other._Query.Count)
                    return false;
                foreach (string key in this._Query.Keys)
                    if (!other._Query.ContainsKey(key) || !other._Query[key].Equals(this._Query[key]))
                        return false;

            }

            return true;
        }
        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
        public override string ToString()
        {
            string res = "";
            //host
            if (_Host != null)
                res += "http://" + _Host;
            //port
            if (_Port != 80)
                res += String.Format(":{0}", _Port);
            //path
            res += Path;
            //query
            if (_Query != null)
            {
                bool first = true;
                foreach (KeyValuePair<string, string> pair in _Query)
                {
                    res += String.Format("{0}{1}={2}", first ? "?" : "&", pair.Key, pair.Value);
                    first = false;
                }
            }
            //fragment
            if (_Fragment != null)
                res += String.Format("#{0}", _Fragment);
            //done!
            return res;
        }
    }
}