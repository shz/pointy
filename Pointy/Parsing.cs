// Parsing.cs
// Parsing stuff for Pointy

// Copyright (c) 2010 Patrick Stein
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Text;

using Pointy.HTTP;

namespace Pointy
{
    /// <summary>
    /// HTTP response returned from a parser
    /// </summary>
    public class ParseResponse
    {
        public static readonly ParseResponse Continue = new ParseResponse(100, "Continue", null);

        public ushort Number
        {
            get;
            set;
        }
        public string Name
        {
            get;
            set;
        }
        public string Info
        {
            get;
            set;
        }

        public ParseResponse(ushort number, string name) : this(number, name, null)
        {

        }
        public ParseResponse(ushort number, string name, string info)
        {
            Number = number;
            Name = name;
            Info = info;
        }
    }
    /// <summary>
    /// Some error HTTP responses
    /// </summary>
    static class ParseError
    {
        public static readonly ParseResponse BadRequest = new ParseResponse(400, "Bad Request");
        public static readonly ParseResponse RequestEntityTooLarge = new ParseResponse(414, "Request Entity Too Large");
        public static readonly ParseResponse RequestURITooLong = new ParseResponse(414, "Request-URI Too Long");
        public static readonly ParseResponse UnsupportedMediaType = new ParseResponse(415, "Unsupported Media Type");
        public static readonly ParseResponse NotImplemented = new ParseResponse(501, "Not Implemented");
        public static readonly ParseResponse HTTPVersionNotSupported = new ParseResponse(505, "HTTP Version Not Supported");
    }

    /// <summary>
    /// Information returned from a parser after processing an input buffer
    /// </summary>
    public class ParseResult
    {
        /// <summary>
        /// If true, the connection should be closed after serving the client a response
        /// </summary>
        public bool Close
        {
            get;
            set;
        }
        /// <summary>
        /// An HTTP request, parsed from the prior input buffers
        /// </summary>
        public Request Request
        {
            get;
            set;
        }
        /// <summary>
        /// An HTTP response generated by the parser, to be sent to the client
        /// </summary>
        public Pointy.ParseResponse Response
        {
            get;
            set;
        }

        /// <summary>
        /// Creates a ParseResult with the given response from the parser.
        /// The Close property is set to true.
        /// </summary>
        /// <param name="response"></param>
        public ParseResult(ParseResponse response)
        {
            Response = response;
            //Default to close here to make life easier, since most
            //of the responses we'll return from the parser are
            //errors.
            Close = true;
        }
        /// <summary>
        /// Creates a ParseResult containing a request.
        /// </summary>
        /// <param name="request"></param>
        /// <param name="close"></param>
        public ParseResult(Request request, bool close)
        {
            Request = request;
            Close = close;
        }
    }

    /// <summary>
    /// Parser interface.
    /// 
    /// Any class implementing this interface must have a parameterless constructor.  This
    /// is technically optional, but in order to use the parser with the Pointy server, this
    /// constraint must be met.
    /// </summary>
    public interface IParser
    {
        /// <summary>
        /// Maximum size of the HTTP entity.  This property will be set prior to any AddBytes calls.
        /// </summary>
        int MaximumEntitySize
        {
            get;
            set;
        }

        /// <summary>
        /// Sends data to the parser to be immediately parsed.  The data buffer
        /// will not be modified by Pointy once it has been sent to the parser.
        /// </summary>
        /// <param name="data">
        /// 
        /// </param>
        /// <returns>
        /// A ParseResult object if the parser has information to pass back to Pointy
        /// or null if the data has been consumed without any information being passed.
        /// </returns>
        ParseResult AddBytes(ArraySegment<byte> data);
    }
}
